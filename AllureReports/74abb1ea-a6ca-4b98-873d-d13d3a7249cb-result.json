{"name": "test_start_mining", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=141.0.7390.55)\nStacktrace:\n\tGetHandleVerifier [0x0x127fee3+66515]\n\tGetHandleVerifier [0x0x127ff24+66580]\n\t(No symbol) [0x0x106dc48]\n\t(No symbol) [0x0x104c18d]\n\t(No symbol) [0x0x10e1a4e]\n\t(No symbol) [0x0x10fc4d9]\n\t(No symbol) [0x0x10dafc6]\n\t(No symbol) [0x0x10ac2ca]\n\t(No symbol) [0x0x10ad154]\n\tGetHandleVerifier [0x0x14d7413+2521347]\n\tGetHandleVerifier [0x0x14d2393+2500739]\n\tGetHandleVerifier [0x0x12a7d34+229924]\n\tGetHandleVerifier [0x0x1298298+165768]\n\tGetHandleVerifier [0x0x129ed4d+193085]\n\tGetHandleVerifier [0x0x12881f8+100072]\n\tGetHandleVerifier [0x0x1288390+100480]\n\tGetHandleVerifier [0x0x127264a+11066]\n\tBaseThreadInitThunk [0x0x7694fcc9+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x77d482ae+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x77d4827e+238]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e12c9291bddcd3c8f9a71faf4d88b26c\")>\n\n    @pytest.mark.startMining\n    def test_start_mining(driver):\n        login(driver)\n>       mining_button = WebDriverWait(driver,20).until(EC.element_to_be_clickable(Start_Mining.start_button))\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCosmiMiner\\test_cosmic_miner.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nMyEnv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\nMyEnv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:624: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nMyEnv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nMyEnv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017DCE9C4B90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...tRtlGetAppContainerNamedObjectPath [0x0x77d482ae+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x77d4827e+238]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=141.0.7390.55)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x127fee3+66515]\nE       \tGetHandleVerifier [0x0x127ff24+66580]\nE       \t(No symbol) [0x0x106dc48]\nE       \t(No symbol) [0x0x104c18d]\nE       \t(No symbol) [0x0x10e1a4e]\nE       \t(No symbol) [0x0x10fc4d9]\nE       \t(No symbol) [0x0x10dafc6]\nE       \t(No symbol) [0x0x10ac2ca]\nE       \t(No symbol) [0x0x10ad154]\nE       \tGetHandleVerifier [0x0x14d7413+2521347]\nE       \tGetHandleVerifier [0x0x14d2393+2500739]\nE       \tGetHandleVerifier [0x0x12a7d34+229924]\nE       \tGetHandleVerifier [0x0x1298298+165768]\nE       \tGetHandleVerifier [0x0x129ed4d+193085]\nE       \tGetHandleVerifier [0x0x12881f8+100072]\nE       \tGetHandleVerifier [0x0x1288390+100480]\nE       \tGetHandleVerifier [0x0x127264a+11066]\nE       \tBaseThreadInitThunk [0x0x7694fcc9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77d482ae+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77d4827e+238]\n\nMyEnv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "start": 1760007791740, "stop": 1760007803626, "uuid": "d87ff1fe-6881-4af5-8cb0-ba6be88d1126", "historyId": "dc2b2dd513732a81927bdab9d8138962", "testCaseId": "dc2b2dd513732a81927bdab9d8138962", "fullName": "CosmiMiner.test_cosmic_miner#test_start_mining", "labels": [{"name": "tag", "value": "startMining"}, {"name": "parentSuite", "value": "CosmiMiner"}, {"name": "suite", "value": "test_cosmic_miner"}, {"name": "host", "value": "DESKTOP-OBD7C74"}, {"name": "thread", "value": "13012-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "CosmiMiner.test_cosmic_miner"}], "titlePath": ["CosmiMiner", "test_cosmic_miner.py"]}